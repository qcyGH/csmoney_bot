from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold, hlink
from main import collect_data
from bot_token import *
import time
import json

bot = Bot(token=bot_token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    start_buttons = ['–ù–æ–∂–∏ üî™', '–ü–µ—Ä—á–∞—Ç–∫–∏ ü•ä', '–ü–∏—Å—Ç–æ–ª–µ—Ç—ã üî´', '–ü–∏—Å—Ç–æ–ª–µ—Ç—ã-–ø—É–ª–µ–º—ë—Ç—ã üî´', '–®—Ç—É—Ä–º–æ–≤—ã–µ –≤–∏–Ω—Ç–æ–≤–∫–∏ üî´', '–°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ –≤–∏–Ω—Ç–æ–≤–∫–∏ üí•', '–î—Ä–æ–±–æ–≤–∏–∫–∏ üí•', '–ü—É–ª–µ–º—ë—Ç—ã üî´']
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(*start_buttons)

    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=keyboard)

@dp.message_handler(Text(equals='–ù–æ–∂–∏ üî™'))
async def get_discount_knives(message: types.Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. –ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑...')

    collect_data(weapont_type=2, minPrice=2000)

    with open('result.json', encoding="utf-8") as file:
        data = json.load(file)

    count_result = 0
    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
               f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
               f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'
        count_result += 1
        if index%20 == 0:
            time.sleep(3)

        await message.answer(card) 
    await message.answer(f'–ù–∞–π–¥–µ–Ω–æ {count_result} –ø–æ–∑–∏—Ü–∏–π üî•')
    await message.answer('–£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ üòâ')

@dp.message_handler(Text(equals='–ü–µ—Ä—á–∞—Ç–∫–∏ ü•ä'))
async def get_discount_knives(message: types.Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. –ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑...')

    collect_data(weapont_type=13, minPrice=1200)

    with open('result.json', encoding="utf-8") as file:
        data = json.load(file)

    count_result = 0
    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
               f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
               f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'
        count_result += 1
        if index%20 == 0:
            time.sleep(3)

        await message.answer(card) 
    await message.answer(f'–ù–∞–π–¥–µ–Ω–æ {count_result} –ø–æ–∑–∏—Ü–∏–π üî•')
    await message.answer('–£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ üòâ')

@dp.message_handler(Text(equals='–ü–∏—Å—Ç–æ–ª–µ—Ç—ã üî´'))
async def get_discount_knives(message: types.Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. –ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑...')

    collect_data(weapont_type=5, minPrice=500)

    with open('result.json', encoding="utf-8") as file:
        data = json.load(file)

    count_result = 0
    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
               f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
               f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'
        count_result += 1
        if index%20 == 0:
            time.sleep(3)

        await message.answer(card) 
    await message.answer(f'–ù–∞–π–¥–µ–Ω–æ {count_result} –ø–æ–∑–∏—Ü–∏–π üî•')
    await message.answer('–£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ üòâ')

@dp.message_handler(Text(equals='–ü–∏—Å—Ç–æ–ª–µ—Ç—ã-–ø—É–ª–µ–º—ë—Ç—ã üî´'))
async def get_discount_knives(message: types.Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. –ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑...')

    collect_data(weapont_type=6, minPrice=100)

    with open('result.json', encoding="utf-8") as file:
        data = json.load(file)

    count_result = 0
    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
               f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
               f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'
        count_result += 1
        if index%20 == 0:
            time.sleep(3)

        await message.answer(card) 
    await message.answer(f'–ù–∞–π–¥–µ–Ω–æ {count_result} –ø–æ–∑–∏—Ü–∏–π üî•')
    await message.answer('–£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ üòâ')

@dp.message_handler(Text(equals='–®—Ç—É—Ä–º–æ–≤—ã–µ –≤–∏–Ω—Ç–æ–≤–∫–∏ üî´'))
async def get_discount_knives(message: types.Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. –ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑...')

    collect_data(weapont_type=3, minPrice=2000)

    with open('result.json', encoding="utf-8") as file:
        data = json.load(file)

    count_result = 0
    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
               f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
               f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'
        count_result += 1
        if index%20 == 0:
            time.sleep(3)

        await message.answer(card) 
    await message.answer(f'–ù–∞–π–¥–µ–Ω–æ {count_result} –ø–æ–∑–∏—Ü–∏–π üî•')
    await message.answer('–£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ üòâ')                      

@dp.message_handler(Text(equals='–°–Ω–∞–π–ø–µ—Ä—Å–∫–∏–µ –≤–∏–Ω—Ç–æ–≤–∫–∏ üí•'))
async def get_discount_knives(message: types.Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. –ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑...')

    collect_data(weapont_type=4, minPrice=2000)

    with open('result.json', encoding="utf-8") as file:
        data = json.load(file)

    count_result = 0
    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
               f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
               f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'
        count_result += 1
        if index%20 == 0:
            time.sleep(3)

        await message.answer(card) 
    await message.answer(f'–ù–∞–π–¥–µ–Ω–æ {count_result} –ø–æ–∑–∏—Ü–∏–π üî•')
    await message.answer('–£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ üòâ')

@dp.message_handler(Text(equals='–î—Ä–æ–±–æ–≤–∏–∫–∏ üí•'))
async def get_discount_knives(message: types.Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. –ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑...')

    collect_data(weapont_type=7, minPrice=50)

    with open('result.json', encoding="utf-8") as file:
        data = json.load(file)

    count_result = 0
    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
               f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
               f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'
        count_result += 1
        if index%20 == 0:
            time.sleep(3)

        await message.answer(card) 
    await message.answer(f'–ù–∞–π–¥–µ–Ω–æ {count_result} –ø–æ–∑–∏—Ü–∏–π üî•')
    await message.answer('–£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ üòâ')

@dp.message_handler(Text(equals='–ü—É–ª–µ–º—ë—Ç—ã üî´'))
async def get_discount_knives(message: types.Message):
    await message.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ. –ü—Ä–æ–≤–æ–∂—É –∞–Ω–∞–ª–∏–∑...')

    collect_data(weapont_type=8, minPrice=20)

    with open('result.json', encoding="utf-8") as file:
        data = json.load(file)

    count_result = 0
    for index, item in enumerate(data):
        card = f'{hlink(item.get("full_name"), item.get("3d"))}\n' \
               f'{hbold("–°–∫–∏–¥–∫–∞: ")}{item.get("overprice")}%\n' \
               f'{hbold("–¶–µ–Ω–∞: ")}${item.get("item_price")}'
        count_result += 1
        if index%20 == 0:
            time.sleep(3)

        await message.answer(card) 
    await message.answer(f'–ù–∞–π–¥–µ–Ω–æ {count_result} –ø–æ–∑–∏—Ü–∏–π üî•')
    await message.answer('–£–¥–∞—á–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ üòâ')                                  
            

def main():
    executor.start_polling(dp)

if __name__ == '__main__':
    main()       